---
---

---Preprint

@article{zimmerman2023sound,
  abbr={POPL},
  title={Sound Gradual Verification with Symbolic Execution},
  author={Zimmerman, Conrad and DiVincenzo, Jenna and Aldrich, Jonathan},
  journal={arXiv preprint arXiv:2311.07559},
  year={2023},
  abstract={Gradual verification, which supports explicitly partial specifications and verifies them with a combination of static and dynamic checks, makes verification more incremental and provides earlier feedback to developers. While an abstract, weakest precondition-based approach to gradual verification was previously proven sound, the approach did not provide sufficient guidance for implementation and optimization of the required run-time checks. More recently, gradual verification was implemented using symbolic execution techniques, but the soundness of the approach (as with related static checkers based on implicit dynamic frames) was an open question. This paper puts practical gradual verification on a sound footing with a formalization of symbolic execution, optimized run-time check generation, and run time execution. We prove our approach is sound; our proof also covers a core subset of the Viper tool, for which we are aware of no previous soundness result. Our formalization enabled us to find a soundness bug in an implemented gradual verification tool and describe the fix necessary to make it sound.},
  html={https://arxiv.org/abs/2311.07559},
  pdf={zimmerman2024soundgv.pdf},
  selected={true}
}

@article{divincenzo2022gradual,
  abbr={arXiv},
  title={Gradual C0: Symbolic Execution for Efficient Gradual Verification},
  author={DiVincenzo, Jenna and McCormack, Ian and Gouni, Hemant and Gorenburg, Jacob and Zhang, Mona and Zimmerman, Conrad and Sunshine, Joshua and Tanter, {\'E}ric and Aldrich, Jonathan},
  journal={arXiv preprint arXiv:2210.02428},
  year={2022},
  abstract={Current static verification techniques such as separation logic support a wide range of programs. However, such techniques only support complete and detailed specifications, which places an undue burden on users. To solve this problem, prior work proposed gradual verification, which handles complete, partial, or missing specifications by soundly combining static and dynamic checking. Gradual verification has also been extended to programs that manipulate recursive, mutable data structures on the heap. Unfortunately, this extension does not reward users with decreased dynamic checking as specifications are refined. In fact, all properties are checked dynamically regardless of any static guarantees. Additionally, no full-fledged implementation of gradual verification exists so far, which prevents studying its performance and applicability in practice. We present Gradual C0, the first practical gradual verifier for recursive heap data structures, which targets C0, a safe subset of C designed for education. To minimize insertion of dynamic checks and support efficiency, Gradual C0 adopts symbolic execution at its core, instead of the backwards reasoning of weakest liberal preconditions used in prior work. Our approach addresses technical challenges related to symbolic execution with imprecise specifications, heap ownership, and branching in both program statements and specification formulas. Finally, we provide the first empirical performance evaluation of a gradual verifier, and found that on average, Gradual C0 decreases run-time overhead between 50-90% compared to the fully-dynamic approach used in prior work. Further, the worst-case scenarios for performance are predictable and avoidable. This work paves the way towards evaluating gradual verification at scale.},
  html={https://arxiv.org/abs/2210.02428},
  pdf={divincenzo2022gradualc0.pdf},
  selected={true}
}

---Main

@InProceedings{estep_et_al:LIPIcs.ECOOP.2021.3,
  abbr={ECOOP},
  author =	{Estep, Sam and Wise, Jenna L and Aldrich, Jonathan and Tanter, \'{E}ric and Bader, Johannes and Sunshine, Joshua},
  title =	{{Gradual Program Analysis for Null Pointers}},
  booktitle =	{35th European Conference on Object-Oriented Programming (ECOOP 2021)},
  pages =	{3:1--3:25},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-190-0},
  ISSN =	{1868-8969},
  year =	{2021},
  volume =	{194},
  editor =	{M{\o}ller, Anders and Sridharan, Manu},
  publisher =	{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{https://drops.dagstuhl.de/opus/volltexte/2021/14046},
  URN =		{urn:nbn:de:0030-drops-140469},
  doi =		{10.4230/LIPIcs.ECOOP.2021.3},
  annote =	{Keywords: gradual typing, gradual verification, dataflow analysis},
  abstract= {Static analysis tools typically address the problem of excessive false positives by requiring programmers to explicitly annotate their code. However, when faced with incomplete annotations, many analysis tools are either too conservative, yielding false positives, or too optimistic, resulting in unsound analysis results. In order to flexibly and soundly deal with partially-annotated programs, we propose to build upon and adapt the gradual typing approach to abstract-interpretation-based program analyses. Specifically, we focus on null-pointer analysis and demonstrate that a gradual null-pointer analysis hits a sweet spot, by gracefully applying static analysis where possible and relying on dynamic checks where necessary for soundness. In addition to formalizing a gradual null-pointer analysis for a core imperative language, we build a prototype using the Infer static analysis framework, and present preliminary evidence that the gradual null-pointer analysis reduces false positives compared to two existing null-pointer checkers for Infer. Further, we discuss ways in which the gradualization approach used to derive the gradual analysis from its static counterpart can be extended to support more domains. This work thus provides a basis for future analysis tools that can smoothly navigate the tradeoff between human effort and run-time overhead to reduce the number of reported false positives.},
  html = {https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.ECOOP.2021.3},
  pdf = {estep2020gradualnp.pdf},
  selected={true}
}

@article{coblenz2021pliers,
  abbr={TOCHI},
  title={PLIERS: a process that integrates user-centered methods into programming language design},
  author={Coblenz, Michael and Kambhatla, Gauri and Koronkevich, Paulette and Wise, Jenna L and Barnaby, Celeste and Sunshine, Joshua and Aldrich, Jonathan and Myers, Brad A},
  journal={ACM Transactions on Computer-Human Interaction (TOCHI)},
  volume={28},
  number={4},
  pages={1--53},
  year={2021},
  publisher={ACM New York, NY, USA},
  abstract= {Programming language design requires making many usability-related design decisions. However, existing HCI methods can be impractical to apply to programming languages: languages have high iteration costs, programmers require significant learning time, and user performance has high variance. To address these problems, we adapted both formative and summative HCI methods to make them more suitable for programming language design. We integrated these methods into a new process, PLIERS, for designing programming languages in a user-centered way. We assessed PLIERS by using it to design two new programming languages. Glacier extends Java to enable programmers to express immutability properties effectively and easily. Obsidian is a language for blockchains that includes verification of critical safety properties. Empirical studies showed that the PLIERS process resulted in languages that could be used effectively by many programmers and revealed additional opportunities for language improvement.},
  html = {https://dl.acm.org/doi/10.1145/3452379},
  pdf = {coblenz2021pliers.pdf},
  selected={true}
}

@article{wise2020gradual,
  abbr={OOPSLA},
  title={Gradual Verification of Recursive Heap Data Structures},
  author={Wise, Jenna and Bader, Johannes and Wong, Cameron and Aldrich, Jonathan and Tanter, {\'E}ric and Sunshine, Joshua},
  journal={Proceedings of the ACM on Programming Languages},
  volume={4},
  number={OOPSLA},
  pages={1--28},
  year={2020},
  publisher={ACM New York, NY, USA},
  abstract= {},
  html = {},
  pdf = {},
  selected={true}
}

@article{ye2020penrose,
  abbr={TOG},
  title={Penrose: from mathematical notation to beautiful diagrams},
  author={Ye, Katherine and Ni, Wode and Krieger, Max and Ma'ayan, Dor and Wise, Jenna and Aldrich, Jonathan and Sunshine, Joshua and Crane, Keenan},
  journal={ACM Transactions on Graphics (TOG)},
  volume={39},
  number={4},
  pages={144--1},
  year={2020},
  publisher={ACM New York, NY, USA},
  abstract= {},
  html = {},
  pdf = {},
  selected={true}
}

@inproceedings{wise2018performance,
  abbr={HPEC},
  title={Performance of Graph Analytics Applications on Many-Core Processors},
  author={Wise, Jenna and Lederman, Emily and Kumar, Manoj and Pattnaik, Pratap},
  booktitle={2018 IEEE High Performance extreme Computing Conference (HPEC)},
  pages={1--7},
  year={2018},
  organization={IEEE},
  abstract= {},
  html = {},
  pdf = {},
  selected={true}
}

@article{sharif2016tracking,
  abbr={IEEE},
  title={Tracking Developers' eyes in the IDE},
  author={Sharif, Bonita and Shaffer, Timothy and Wise, Jenna and Maletic, Jonathan I},
  journal={IEEE Software},
  volume={33},
  number={3},
  pages={105--108},
  year={2016},
  publisher={IEEE},
  abstract= {},
  html = {},
  pdf = {},
  selected={true}
}

@inproceedings{shaffer2015itrace,
  abbr={ESEC/FSE},
  title={itrace: Enabling eye tracking on software artifacts within the ide to support software engineering tasks},
  author={Shaffer, Timothy R and Wise, Jenna L and Walters, Braden M and M{\"u}ller, Sebastian C and Falcone, Michael and Sharif, Bonita},
  booktitle={Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
  pages={954--957},
  year={2015},
  abstract= {},
  html = {},
  pdf = {},
  selected={true}
}

---Workshop

@inproceedings{sun2024prisc,
  abbr={PriSC},
  title={Gradual Verification for Smart Contracts},
  author={Sun, Haojia and Singh, Kunal and Ramos-D\'{a}vila, Jan-Paul and Aldrich, Jonathan and DiVincenzo, Jenna},
  maintitle={Symposium on Principles of Programming Languages},
  booktitle={8th Workshop on the Principles of Secure Compilation},
  year={2024}
}

@inproceedings{wise2020wgt,
  abbr={WGT},
  title={Gradual Verification of Recursive Heap Data Structures},
  author={Wise, Jenna and Bader, Johannes and Aldrich, Jonathan and Tanter, \'{E}ric and Sunshine, Joshua},
  maintitle={Symposium on Principles of Programming Languages},
  booktitle={First ACM SIGPLAN Workshop on Gradual Typing},
  year={2020}
}

@inproceedings{estep2020gradual,
  abbr={WGT},
  title={Gradual program analysis},
  author={Estep, Samuel and Wise, Jenna and Aldrich, Jonathan and Tanter, \'{E}ric and Bader, Johannes and Sunshine, Joshua},
  maintitle={Symposium on Principles of Programming Languages},
  booktitle={First ACM SIGPLAN Workshop on Gradual Typing},
  year={2020}
}

@inproceedings{wise2016towards,
  abbr={SEmotion},
  title={Towards an emotionally aware development environment: invited talk},
  author={Wise, Jenna and Prox, Brent and Clark, Benjamin and Sharif, Bonita},
  booktitle={Proceedings of the 1st International Workshop on Emotion Awareness in Software Engineering},
  pages={26--27},
  year={2016}
}

---Misc
@article{haigler2016redistricting,
  abbr={SIAM},
  title={Redistricting Youngstown Police Beats},
  author={Haigler, Sebastian and Orr, Ashley and Shehadi, Eric and Wise, Jenna and Yazvac, Kristi},
  journal={SIAM Undergraduate Research Online},
  volume={9},
  pages={404--421},
  year={2016}
}
